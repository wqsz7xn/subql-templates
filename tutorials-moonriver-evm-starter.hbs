{-# START_FILE docker-compose.yml #-}
version: '3'

services:
  postgres:
    image: postgres:12-alpine
    ports:
      - 5432:5432
    volumes:
      - .data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres

  subquery-node:
    image: onfinality/subql-node:latest
    depends_on:
      - "postgres"
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./:/app
    command:
      - -f=/app
      - --local

  graphql-engine:
    image: onfinality/subql-query:latest
    ports:
      - 3000:3000
    depends_on:
      - "postgres"
      - "subquery-node"
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    command:
      - --name=app
      - --playground
      - --indexer=http://subquery-node:3000
{-# START_FILE erc20.abi.json #-}
[
    {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "approve",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "transferFrom",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
            {
                "name": "",
                "type": "uint8"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "balanceOf",
        "outputs": [
            {
                "name": "balance",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "name": "allowance",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "payable": true,
        "stateMutability": "payable",
        "type": "fallback"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "spender",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Approval",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "from",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Transfer",
        "type": "event"
    }
]
{-# START_FILE package.json #-}
{
  "name": "moonriver-evm-starter-project",
  "version": "{{subql_version}}",
  "description": "{{subql_description}}",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc -b",
    "prepack": "rm -rf dist && npm build",
    "test": "jest",
    "codegen": "./node_modules/.bin/subql codegen"
  },
  "homepage": "{{subql_repository}}",
  "repository": "github:subquery/tutorials-moonriver-evm-starter",
  "files": [
    "dist",
    "schema.graphql",
    "project.yaml"
  ],
  "author": "{{subql_author}}",
  "license": "{{subql_license}}",
  "devDependencies": {
    "@polkadot/api": "^6.6.1",
    "@subql/cli": "^0.15.0",
    "typescript": "^4.1.3"
  },
  "dependencies": {
    "@subql/contract-processors": "^0.3.0",
    "@subql/types": "^0.10.0",
    "ethers": "^5.5.0"
  }
}
{-# START_FILE project.yaml #-}
specVersion: "0.2.0"

name: "{{subql_name}}"
version: "{{subql_version}}"
description: "{{subql_description}}"
repository: "{{subql_repository}}"

schema:
  file: "./schema.graphql"

network:
  genesisHash: '0x401a1f9dca3da46f5c4091016c8a2f26dcea05865116b286f60f668207d1474b' # Genesis hash of Moonriver
  endpoint: {{subql_endpoint}}
  # Optionally provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: 'https://api.subquery.network/sq/subquery/moonriver-dictionary'

  chaintypes:
    file: "./types.yaml"

dataSources:
  - kind: substrate/Moonbeam
    startBlock: 752073
    processor:
      file: './node_modules/@subql/contract-processors/dist/moonbeam.js'
      options:
        # Must be a key of assets
        abi: erc20
        ## The contract that emitted the event
        address: '0x6bd193ee6d2104f14f94e2ca6efefae561a4334b'
    assets:
      erc20:
        file: './erc20.abi.json'
    mapping:
      file: './dist/index.js'
      handlers:
        - handler: handleMoonriverEvent
          kind: substrate/MoonbeamEvent
          filter:
            ## Topics that follow Ethereum JSON-RPC log filters
            ## https://docs.ethers.io/v5/concepts/events/
            ## With a couple of added benefits:
            ##  - Values don't need to be 0 padded
            ##  - Event fragments can be provided and automatically converted to their id
            topics:
              ## Example valid values:
              # - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
              # - Transfer(address,address,u256)
              # - Transfer(address from,address to,uint256 value)

              ## Example of OR filter, will capture Transfer or Approval events
              # - - 'Transfer(address indexed from,address indexed to,uint256 value)'
              #   - 'Approval(address indexed owner, address indexed spender, uint256 value)'

              - Transfer(address indexed from,address indexed to,uint256 value)
              ## topics[1] to topics[3] are the indexed values
              - null
              - null
              - null
        - handler: handleMoonriverCall
          kind: substrate/MoonbeamCall
          filter:
            ## The function can either be the method fragment or signature
            # function: '0x095ea7b3'
            # function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'
            # function: approve(address,uint256)
            function: approve(address to,uint256 value)

            ## The transaction sender
            # from: '0x6bd193ee6d2104f14f94e2ca6efefae561a4334b'


{-# START_FILE README.md #-}
# SubQuery - Starter Package


The Starter Package is an example that you can use as a starting point for developing your SubQuery project.
A SubQuery package defines which data The SubQuery will index from the Substrate blockchain, and how it will store it. 

## Preparation

#### Environment

- [Typescript](https://www.typescriptlang.org/) are required to compile project and define types.  

- Both SubQuery CLI and generated Project have dependencies and require [Node](https://nodejs.org/en/).
     

#### Install the SubQuery CLI

Install SubQuery CLI globally on your terminal by using NPM:

```
npm install -g @subql/cli
```

Run help to see available commands and usage provide by CLI
```
subql help
```

## Initialize the starter package

Inside the directory in which you want to create the SubQuery project, simply replace `project-name` with your project name and run the command:
```
subql init --starter project-name
```
Then you should see a folder with your project name has been created inside the directory, you can use this as the start point of your project. And the files should be identical as in the [Directory Structure](https://doc.subquery.network/directory_structure.html).

Last, under the project directory, run following command to install all the dependency.
```
yarn install
```


## Configure your project

In the starter package, we have provided a simple example of project configuration. You will be mainly working on the following files:

- The Manifest in `project.yaml`
- The GraphQL Schema in `schema.graphql`
- The Mapping functions in `src/mappings/` directory

For more information on how to write the SubQuery, 
check out our doc section on [Define the SubQuery](https://doc.subquery.network/define_a_subquery.html) 

#### Code generation

In order to index your SubQuery project, it is mandatory to build your project first.
Run this command under the project directory.

````
yarn codegen
````

## Build the project

In order to deploy your SubQuery project to our hosted service, it is mandatory to pack your configuration before upload.
Run pack command from root directory of your project will automatically generate a `your-project-name.tgz` file.

```
yarn build
```

## Indexing and Query

#### Run required systems in docker


Under the project directory run following command:

```
docker-compose pull && docker-compose up
```
#### Query the project

Open your browser and head to `http://localhost:3000`.

Finally, you should see a GraphQL playground is showing in the explorer and the schemas that ready to query.

For the `subql-starter` project, you can try to query with the following code to get a taste of how it works.

````graphql
{
  query{
    starterEntities(first:10){
      nodes{
        field1,
        field2,
        field3
      }
    }
  }
}
````
{-# START_FILE schema.graphql #-}
type Transaction @entity {

  id: ID! # Transaction hash

  value: BigInt!

  to: String!

  from: String!

  contractAddress: String!
}


type Approval @entity {
  id: ID! # Transaction hash

  value: BigInt!

  owner: String!

  spender: String!

  contractAddress: String!
}
{-# START_FILE src/index.ts #-}
//Exports all handler functions
export * from './mappings/mappingHandlers'
{-# START_FILE src/mappings/mappingHandlers.ts #-}
import {Approval, Transaction} from "../types";
import { MoonbeamEvent, MoonbeamCall } from '@subql/contract-processors/dist/moonbeam';
import { BigNumber } from "ethers";

// Setup types from ABI
type TransferEventArgs = [string, string, BigNumber] & { from: string; to: string; value: BigNumber; };
type ApproveCallArgs = [string, BigNumber] & { _spender: string; _value: BigNumber; }

export async function handleMoonriverEvent(event: MoonbeamEvent<TransferEventArgs>): Promise<void> {
    const transaction = new Transaction(event.transactionHash);

    transaction.value = event.args.value.toBigInt();
    transaction.from = event.args.from;
    transaction.to = event.args.to;
    transaction.contractAddress = event.address;

    await transaction.save();
}

export async function handleMoonriverCall(event: MoonbeamCall<ApproveCallArgs>): Promise<void> {
    const approval = new Approval(event.hash);

    approval.owner = event.from;
    approval.value = event.args._value.toBigInt();
    approval.spender = event.args._spender;
    approval.contractAddress = event.to;

    await approval.save();
}
{-# START_FILE tsconfig.json #-}
{
  "compilerOptions": {
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "esModuleInterop": true,
    "declaration": true,
    "importHelpers": true,
    "resolveJsonModule": true,
    "module": "commonjs",
    "outDir": "dist",
    "rootDir": "src",
    "target": "es2017"
  },
  "include": [
    "src/**/*",
    "node_modules/@subql/types/dist/global.d.ts"
  ]
}
{-# START_FILE types.yaml #-}
types:
  AccountId: EthereumAccountId
  Address: AccountId
  Balance: u128
  RefCount: u8
  LookupSource: AccountId
  Account:
    nonce: U256
    balance: u128
  RewardInfo:
    total_reward: Balance
    claimed_reward: Balance
    contributed_relay_addresses: Vec<RelayChainAccountId>
  VestingBlockNumber: u32
  NominatorStatus:
    _enum:
      Active: "Null"
      Leaving: RoundIndex
  Nominator2:
    nominations: Vec<Bond>
    revocations: Vec<AccountId>
    total: Balance
    scheduled_revocations_count: u32
    scheduled_revocations_total: Balance
    status: NominatorStatus
  ExitQ:
    candidates: Vec<AccountId>
    nominators_leaving: Vec<AccountId>
    candidate_schedule: Vec<(AccountId, RoundIndex)>
    nominator_schedule: Vec<(AccountId, Option<AccountId>, RoundIndex)>
  EthereumSignature:
    r: H256
    s: H256
    v: U8
  Collator2:
    id: AccountId
    bond: Balance
    nominators: Vec<AccountId>
    top_nominators: Vec<Bond>
    bottom_nominators: Vec<Bond>
    total_counted: Balance
    total_backing: Balance
    state: CollatorStatus
  NominatorAdded:
    _enum:
      AddedToTop: Balance
      AddedToBottom: "Null"
  RegistrationInfo:
    account: AccountId
    deposit: Balance
  ParachainBondConfig:
    account: AccountId
    percent: Percent
  AccountId32: H256
  AuthorId: AccountId32
  RelayChainAccountId: AccountId32
  AccountInfo: AccountInfoWithTripleRefCount
  Candidate:
    id: AccountId
    fee: Perbill
    bond: Balance
    nominators: Vec<Bond>
    total: Balance
    state: CollatorStatus
  CollatorStatus:
    _enum:
      Active: "Null"
      Idle: "Null"
      Leaving: RoundIndex
  Range: RangeBalance
  RangeBalance:
    min: Balance
    ideal: Balance
    max: Balance
  RangePerbill:
    min: Perbill
    ideal: Perbill
    max: Perbill
  InflationInfo:
    expect: RangeBalance
    annual: RangePerbill
    round: RangePerbill
  OrderedSet: Vec<Bond>
  Collator:
    id: AccountId
    bond: Balance
    nominators: Vec<Bond>
    total: Balance
    state: CollatorStatus
  CollatorSnapshot:
    bond: Balance
    nominators: Vec<Bond>
    total: Balance
  SystemInherentData:
    validation_data: PersistedValidationData
    relay_chain_state: StorageProof
    downward_messages: Vec<InboundDownwardMessage>
    horizontal_messages: BTreeMap<ParaId, Vec<InboundHrmpMessage>>
  RoundInfo:
    current: RoundIndex
    first: BlockNumber
    length: u32
  ExtrinsicSignature: EthereumSignature
  RoundIndex: u32
  Nominator:
    nominations: Vec<Bond>
    total: Balance
  Bond:
    owner: AccountId
    amount: Balance
  ValidatorStatus:
    _enum:
      Active: "Null"
      Idle: "Null"
      Leaving: RoundIndex
  TxPoolResultContent:
    pending: HashMap<H160, HashMap<U256, PoolTransaction>>
    queued: HashMap<H160, HashMap<U256, PoolTransaction>>
  TxPoolResultInspect:
    pending: HashMap<H160, HashMap<U256, Summary>>
    queued: HashMap<H160, HashMap<U256, Summary>>
  TxPoolResultStatus:
    pending: U256
    queued: U256
  Summary: Bytes
  PoolTransaction:
    hash: H256
    nonce: U256
    block_hash: Option<H256>
    block_number: Option<U256>
    from: H160
    to: Option<H160>
    value: U256
    gas_price: U256
    gas: U256
    input: Bytes
